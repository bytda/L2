package main

import (
	"fmt"
	"sort"
	"strings"
)

/*
Поиск анаграмм по словарю

Написать функцию поиска всех множеств анаграмм по словарю.

Например:
'пятак', 'пятка' и 'тяпка' - принадлежат одному множеству,
'листок', 'слиток' и 'столик' - другому.

Требования:
Входные данные для функции: ссылка на массив, каждый элемент которого - слово на русском языке в кодировке utf8
Выходные данные: ссылка на мапу множеств анаграмм
Ключ - первое встретившееся в словаре слово из множества. Значение - ссылка на массив, каждый элемент которого,
слово из множества.
Массив должен быть отсортирован по возрастанию.
Множества из одного элемента не должны попасть в результат.
Все слова должны быть приведены к нижнему регистру.
В результате каждое слово должно встречаться только один раз.
*/
func main() {
	words := []string{"столик", "пятак", "пятка", "слиток", "тяпка", "листок", "слово"} //демонстрационный список слов
	fmt.Println(Anagrams(words))                                                        //выводим получившийся словарь
}
func Check(word1, word2 string) bool { //функция для проверки слов являются ли анаграммой или нет
	if len(word1) != len(word2) { //если длина разная то точно не анограммы
		return false
	}
	for _, w := range word1 { //перебираем буквы первого слова
		if strings.Count(word1, string(w)) != strings.Count(word2, string(w)) { //считаем сколько букв в каждом слове не
			// пересеклись с буквами первого слова, если количество не совпало
			return false // то это не анаграммы
		}
	}
	return true // возращаем true если предыдущие проверки прошли успешно
}

func Anagrams(arr []string) map[string][]string {
	result := make(map[string][]string) //объявляем мапу, ключ - строка, значение - слайс строк
	for i, x := range arr {             //перебираем срез на входе
		arr[i] = strings.ToLower(x) //переводим элементы срезы в нижний регистр
	}
	sort.Strings(arr)       //сортируем слова в срезе
	for _, s := range arr { //перебираем отсортированный срез
		IsInMap := false           //переменная для проверки - есть анаграмма в мапе или нет
		for k, v := range result { //перебираем итоговую мапу, но первый раз мы сюда не попадем, так как он пустой
			if Check(k, s) { //сравниваем слово которое уже в результирующем срезе с текущим словом, если они анограммы
				result[k] = append(v, s) //то уже к существующем ключу добавляем текущее слово
				IsInMap = true           //активируем флаг что переменная есть в мапе
				break                    //выходим из цикла
			}
		}
		if !IsInMap { //первый раз мы поподаем сюда, проверка есть ли анаграмма в перечне ключей
			result[s] = append(result[s], s) //добавляем ключ со словом из среза и добавляем это слово в значения
		}
	}
	for k, v := range result { //перебираем итоговую мапу
		if len(v) <= 1 { //если есть множенства с одним словом
			delete(result, k) //то удаляем их
		}
	}
	return result //возращаем мапу
}
