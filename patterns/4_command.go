/*
	Паттерн «Команда».

	https://en.wikipedia.org/wiki/Command_pattern
*/

/*
Паттерн Команда

	Паттерн "Команда" используется когда возникает необходимость передавать запросы как аргументы в методах,
обрабатывать запросы как объекты. Он позволяет инкапсулировать запрос к системе в виде самостоятельного объекта.
Паттерн востребован, когда у приложения есть операции с возможностью undo/redo. Также "команду" можно часто
встретить в микросервисах, которые используют сложные запросы, которые удобно представлять в виде объектов.

	Плюсы:

	Паттерн позволяет сделать независимыми друг от друга объекты, которые вызывают и выполняют операции,
код, как и во всех случаях, когда используются уместные паттерны, становится понятнее в использовании
и чтении - мы можем создавать сложные команды, состоящие из нескольких простых команд (создать модульность),
код реализации команд отделен от других объектов - принцип инкапсуляции, предоставляется гибкость
в обработке команд - можно распределять их выполнение по потокам, ставить в очереди, отменять или повторять и тд

	Минусы:

	Код становится несколько сложнее в написании, потому что надо прописать много новых структур, интерфейс,
это не всегда оправдано в ситуациях, когда система компактная и не содержит большого обилия команд

	Таким образом, паттерн "Команда" обычно применяют для следующих задач:
1) Требуется хранение, логирование, передача команд
2) Хранение команд для операции undo/redo
3) Выполнение команд по расписанию, в порядке очереди, передавать команды на удаленный сервер и т.п.

*/

type Command interface { //содержит метод выполнения команды
	Execute()
}

type SaveCommand struct { //выполняет функцию сохранения
	// получатель и параметры команды
	/*...*/
}

func NewSaveCommand( /*получатель и параметры команды*/ ) *SaveCommand { //конструктор команды SaveCommand

	return &SaveCommand{ /*получатель и параметры команды*/ }
}

func (s *SaveCommand) Execute() { //выполняет команду (запускает процедуру сохранения)

	/*...*/
}

type LoadCommand struct { //выполняет функцию загрузки

	// получатель и параметры команды
	/*...*/
}

func NewLoadCommand( /*получатель и параметры команды*/ ) *LoadCommand { //конструктор команды LoadCommand

	return &LoadCommand{ /*получатель и параметры команды*/ }
}

func (l *LoadCommand) Execute() { //выполняет команду (запускает процедуру сохранения)

	/*...*/
}

type Handler struct { //вызывает заданные команды

	command Command
}

func (h *Handler) SetCommand(com Command) { //задает заранее определенную команду

	h.command = com
}

func (h *Handler) ExecCommand() { //запускает выполнение команды

	h.command.Execute()
}