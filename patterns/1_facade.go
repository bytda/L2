/*
	Паттерн «фасад».

	https://en.wikipedia.org/wiki/Facade_pattern
*/

/*
Фасад:

	Паттерн фасад используется для облегчения использования нескольких интерфейсов разом,
то есть для создания унифицированного(общего) интерфейса через который мы используем
множество других интерфейсов, это как в автомобиле автоматическая коробка передач,
мы только передвигаем рукоятку, а внутри там переключаются передачи, выжимается сцепление и тд.
Если рассматривать в разработке, то, например, рутинные методы подключающие базу данных,
выгружающие данные из переменных окружения, запускающие сервер можно заменить одним методом Launch,
что облегчит код и упростит использование для пользователя.

Плюсы:

	Облегчает код, упрощает использование сложной системой, в подробности которой
можно не вдаваться, просто включаем и все работает, так же полезен для ряда часто повторяющихся
команд, которые можно объединить в одну , как например, с запуском

Минусы:

	Падает гибкость использования системой, мы просто запускаем один большой
метод без возможности что-то поменять при запуске,  скрыта детальная реализация системы,
и если необходимо понимание сути, то появляются сложности

Таким образом, паттерн Фасад используется для:
    1) упрощение работы с фреймворком,
	2) упрощение работы со сложной системой,
	3) облегчение работы с "монолитом"
	4) уменьшение связанности
*/

// Пример реализации: ConnectToDB инициализирует подключение к БД
func ConnectToDB(connStr string) *sql.DB {

	//открываем БД для подключений
	base, err := sql.Open("postgres", connStr)
	if err != nil {
		log.Fatal(err)
	}

	// проверяем подключение к БД
	err = base.Ping()
	if err != nil {
		log.Fatal(err)
	}

	return base
}