/*
	Паттерн «Фабричный метод»

	https://en.wikipedia.org/wiki/Factory_method_pattern
*/

/*
	Паттерн фабрика используется для делегирования создания разных объектов, тип которых определяют сами пользователи
паттерна. Данный паттерн актуален, когда нужно сделать объекты разных типов, но заранее нельзя
предугадать, сколько и каких конкретно, когда нужно отделить код, связанный с созданием и использованием.
Например, когда пользователь выбирает сложность игры и мы в зависимости от выбора генерируем персонажей в игре.
Реальные примеры использования: у нас есть структуры, предназначенные для работы с кэшем, базой данных,
удаленным сервером, файловой системой и тд - их основное предназначение: получать определенные данные (например, структуру
с информацией о заказе или клиенте), а затем куда-то ее записывать (структуры как раз отличаются тем, куда они пишут данные),
фабричный метод дает системе интерфейс с методом "записать", каждый из этих объектов реализует метод по-своему,
когда "записать" вызывается объектом для работы с бд - инфо записывается в бд, когда объектом для работы с кешем - в кеш,
и так далее. Когда мы захотим масштабировать систему и добавить запись еще в один источник, достаточно использовать
этот паттерн

Плюсы:

	Разделяет код на часть с созданием объектов и на часть с их эксплуатацией, тем самым, уменьшая
зависимость структур друг от друга, делает систему более динамичной - мы можем не беспокоиться о том,
какой конкретно тип объектов создавать, систему легко масштабировать, добавляя новые структуры, использующие
тот же интерфейс фабричного метода

Минусы:

	В некоторых ситуациях использовать фабричный метод неудобно, потому что для каждого
типа объекта нужно создавать конкретную "фабрику" - объект, который будет порождающим, таким образом,
мы можем получить очень много структур, что может "засорить" код

Таким образом, паттерн "Фабрика" обычно применяют для следующих задач:

1)Отделение кода производства объектов от кода использования объектов для более удобного расширения
*/

type Data struct {
}

type DB interface { // DB это фабрика баз данных

	Insert(data Data)
	Get(id int) Data
	Delete(id int)
}

// Postgres это один из продуктов фабрики
type Postgres struct {
	/*...*/
}

func (p *Postgres) Insert(data Data) {
	/*...*/
}

func (p *Postgres) Get(id int) Data {
	/*...*/
}

func (p *Postgres) Delete(id int) {
	/*...*/
}

func foo() {
	var db DB
	db = new(Postgres)

	db.Get(5) // вызываем метод не конкретного объекта, а метод фабрики

}
